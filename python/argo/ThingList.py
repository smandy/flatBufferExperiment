# automatically generated by the FlatBuffers compiler, do not modify

# namespace: argo

import flatbuffers

class ThingList(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsThingList(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ThingList()
        x.Init(buf, n + offset)
        return x


    # ThingList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ThingList
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

    # ThingList
    def Things(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Thing import Thing
            obj = Thing()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ThingList
    def ThingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ThingListStart(builder): builder.StartObject(2)
def ThingListAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def ThingListAddThings(builder, things): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(things), 0)
def ThingListStartThingsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ThingListEnd(builder): return builder.EndObject()
